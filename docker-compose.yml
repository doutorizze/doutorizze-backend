version: '3.8'

services:
  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: doutorizze-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-D0ut0r1zz3_R00t_P4ss!}
      MYSQL_DATABASE: ${DB_NAME:-doutorizze}
      MYSQL_USER: ${DB_USER:-doutorizze_app}
      MYSQL_PASSWORD: ${DB_PASSWORD:-D0ut0r1zz3_S3cur3_P4ss!}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/doutorizze.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    networks:
      - doutorizze-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: doutorizze-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${DB_USER:-doutorizze_app}
      DB_PASSWORD: ${DB_PASSWORD:-D0ut0r1zz3_S3cur3_P4ss!}
      DB_NAME: ${DB_NAME:-doutorizze}
      JWT_SECRET: ${JWT_SECRET:-sua_chave_jwt_super_secreta_aqui}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      PARCELAMAIS_API_URL: ${PARCELAMAIS_API_URL:-https://api.parcelamais.com.br}
      PARCELAMAIS_CLIENT_ID: ${PARCELAMAIS_CLIENT_ID:-seu_client_id}
      PARCELAMAIS_CLIENT_SECRET: ${PARCELAMAIS_CLIENT_SECRET:-seu_client_secret}
      PARCELAMAIS_ENVIRONMENT: ${PARCELAMAIS_ENVIRONMENT:-sandbox}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
    ports:
      - "3001:3001"
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    networks:
      - doutorizze-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (opcional - para desenvolvimento)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: doutorizze-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "5173:5173"
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
    networks:
      - doutorizze-network
    depends_on:
      - api
    profiles:
      - development

  # Nginx (Proxy Reverso)
  nginx:
    image: nginx:alpine
    container_name: doutorizze-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - doutorizze-network
    depends_on:
      - api
    profiles:
      - production

  # Redis (Cache - opcional)
  redis:
    image: redis:7-alpine
    container_name: doutorizze-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - doutorizze-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-D0ut0r1zz3_R3d1s!}
    profiles:
      - cache

  # Backup automÃ¡tico
  backup:
    image: mysql:8.0
    container_name: doutorizze-backup
    restart: "no"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: ${DB_USER:-doutorizze_app}
      MYSQL_PASSWORD: ${DB_PASSWORD:-D0ut0r1zz3_S3cur3_P4ss!}
      MYSQL_DATABASE: ${DB_NAME:-doutorizze}
    volumes:
      - ./backups:/backups
      - ./backend/scripts/backup.sh:/backup.sh:ro
    networks:
      - doutorizze-network
    depends_on:
      mysql:
        condition: service_healthy
    profiles:
      - backup
    command: >
      sh -c "
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "

  # Monitoramento (opcional)
  monitoring:
    image: prom/prometheus:latest
    container_name: doutorizze-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - doutorizze-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  doutorizze-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16